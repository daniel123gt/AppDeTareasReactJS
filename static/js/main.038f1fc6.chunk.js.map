{"version":3,"sources":["img/logo.png","logo.svg","components/AgregarTarea.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AgregarTarea","state","title","responsible","description","priority","handleInputChange","bind","handleSubmit","e","preventDefault","this","props","onAddTarea","setState","target","value","name","console","log","className","src","logo","alt","style","width","margin","onSubmit","type","onChange","placeholder","Component","App","tareas","handleAddTarea","tarea","index","window","confirm","filter","i","map","onClick","removeTarea","href","length","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.038f1fc6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d993bff.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from '../img/logo.png'\n\nclass AgregarTarea extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            title: '',\n            responsible: '',\n            description: '',\n            priority: 'low'\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.props.onAddTarea(this.state);\n        this.setState({\n            title: '',\n            responsible: '',\n            description: '',\n            priority: 'Baja'\n        });\n    }\n\n    handleInputChange(e) {\n        const { value, name } = e.target;\n        console.log(value, name);\n        this.setState({\n            [name]: value\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"card border-dark text-white bg-dark\">\n                <img src={logo} alt=\"\" className=\"card-img-top text-center mt-2\" style={{width: 100, margin: 'auto'}} />\n                <form onSubmit={this.handleSubmit} className=\"card-body\">\n                    <div className=\"form-group\">\n                        <input\n                            type=\"text\"\n                            name=\"title\"\n                            className=\"form-control\"\n                            value={this.state.title}\n                            onChange={this.handleInputChange}\n                            placeholder=\"Titulo de la tarea\"\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <input\n                            type=\"text\"\n                            name=\"responsible\"\n                            className=\"form-control\"\n                            value={this.state.responsible}\n                            onChange={this.handleInputChange}\n                            placeholder=\"Responsable de la tarea\"\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <input\n                            type=\"text\"\n                            name=\"description\"\n                            className=\"form-control\"\n                            value={this.state.description}\n                            onChange={this.handleInputChange}\n                            placeholder=\"Descripción\"\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <p>Seleccione una prioridad</p>\n                        <select\n                            name=\"priority\"\n                            className=\"form-control\"\n                            value={this.state.priority}\n                            onChange={this.handleInputChange}\n                        >\n                            <option>Baja</option>\n                            <option>Media</option>\n                            <option>Alta</option>\n                        </select>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-primary\">\n                        Cargar Tarea\n          </button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AgregarTarea;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nimport { tareas } from './tarea.json';\nimport AgregarTarea from './components/AgregarTarea'\nimport { render } from '@testing-library/react';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      tareas: tareas\n    };\n\n    this.handleAddTarea = this.handleAddTarea.bind(this);\n\n  }\n\n  handleAddTarea(tarea) {\n\n    this.setState({\n      tareas: [...this.state.tareas, tarea]\n    })\n\n  }\n\n  removeTarea(index) {\n    if (window.confirm('¿Estás seguro que deseas eliminar esta tarea?')) {\n      this.setState({\n        tareas: this.state.tareas.filter((e, i) => {\n          return i !== index\n        })\n      })\n    }\n  }\n\n  render() {\n\n    const tareas = this.state.tareas.map((tarea, i) => {\n      return (\n        <div className=\"col-md-4\">\n          <div className=\"card border-dark text-white bg-dark mt-4\">\n            <div className=\"card-header\">\n\n              <h3>{tarea.title}</h3>\n              <span className=\"badge badge-pill badge-danger ml-2\">\n                {tarea.priority}\n              </span>\n\n            </div>\n\n            <div className=\"card-body\">\n\n              <p>{tarea.description}</p>\n              <p><mark>{tarea.responsible}</mark></p>\n\n            </div>\n\n            <div className=\"card-footer\">\n\n              <button className=\"btn btn-danger\"\n                onClick={this.removeTarea.bind(this, i)}\n              >\n                Eliminar\n\n              </button>\n\n            </div>\n\n          </div>\n        </div>\n      )\n    })\n\n    return (\n      <div className=\"App\">\n        <nav className=\"navbar navbar-dark bg-dark\" >\n          <a href=\"\" className=\"text-white\">\n            Gestor de Tareas CarDGT\n            </a>\n\n          <span className=\"badge badge-pill badge-light\">\n\n            {this.state.tareas.length}\n\n          </span>\n\n        </nav >\n\n        <div className=\"container mb-4\">\n\n          <div className=\"row mt-4\">\n\n            <div className=\"col-md-3\">\n\n              <img></img>\n\n              <AgregarTarea onAddTarea={this.handleAddTarea} />\n\n            </div>\n\n            <div className=\"col-md-9\">\n\n              <div className=\"row\">\n\n                {tareas}\n\n              </div>\n\n            </div>\n\n          </div>\n\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}